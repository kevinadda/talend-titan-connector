<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map		
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    final String cid = node.getUniqueName();	
    
    List<IMetadataColumn> columnList = null;
    List<IMetadataTable> metadatas = node.getMetadataList();
    IMetadataTable metadata = null;
    
    if (metadatas != null && metadatas.size() > 0) {
    	metadata = metadatas.get(0);
    }	
    
    List<? extends IConnection> inputs = node.getIncomingConnections();
    List<? extends IConnection> outputs = node.getOutgoingSortedConnections();
    String incomingConnName = null;
    String outgoingConnName = null;
    
    if (inputs.size() > 0) {
    	IConnection in = inputs.get(0);
    	incomingConnName = in.getName();
    }
    
    if (outputs.size() > 0) {
    	IConnection out = outputs.get(0);
    	outgoingConnName = out.getName();
    }
    
    String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
    boolean batchImport = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__BATCH_IMPORT__"));
    
    final String startIndexKey = ElementParameterParser.getValue(node, "__START_INDEX_KEY__");
    final String startIndexValueColumn = ElementParameterParser.getValue(node, "__START_INDEX_VALUE__");
    
    final String endIndexKey = ElementParameterParser.getValue(node, "__END_INDEX_KEY__");
    final String endIndexValueColumn = ElementParameterParser.getValue(node, "__END_INDEX_VALUE__");
    
    final String relationshipDirection = ElementParameterParser.getValue(node, "__RELATIONSHIP_DIRECTION__");
    
    final List<Map<String, String>> mappingTable = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__MAPPING__");
    
    final IMetadataColumn startColumn = metadata.getColumn(startIndexValueColumn);
    final IMetadataColumn endColumn = metadata.getColumn(endIndexValueColumn);
    
    class CJTitanRelationshipInserter {
    
    	private String incomingConnName;
    	private IMetadataTable metadata;
    	
    	public CJTitanRelationshipInserter(String incomingConnName, IMetadataTable metadata) {
    		this.incomingConnName = incomingConnName;
			this.metadata = metadata;
    	} 
    
    	public void insert() {
    		%>
    		
    		//@CJ - NB : not checking that the node exists...
    		// Retrieve the nodes using the startIndex
            java.util.Iterator<com.tinkerpop.blueprints.Vertex> startIterator_<%=cid%> = databaseService_<%=cid%>.getVertices(<%=startIndexKey%>, <%=incomingConnName%>.<%=startColumn%>).iterator();
			

    		// Retrieve the nodes using the endIndex
    		java.util.Iterator<com.tinkerpop.blueprints.Vertex> endIterator_<%=cid%> = databaseService_<%=cid%>.getVertices(<%=endIndexKey%>, <%=incomingConnName%>.<%=endColumn%>).iterator();
			
			com.tinkerpop.blueprints.Vertex startNode_<%=cid%> = null;
			if (!startIterator_<%=cid%>.hasNext()) {
				throw new RuntimeException("Start node looked up by index with " + <%=startIndexKey%> + " as key and " + <%=incomingConnName%>.<%=startColumn%> + " as value doesn't exist");
			} else {
			    startNode_<%=cid%> = startIterator_<%=cid%>.next();
			}
			
			com.tinkerpop.blueprints.Vertex endNode_<%=cid%> = null;
			if (!endIterator_<%=cid%>.hasNext()) {
				throw new RuntimeException("End node looked up by index with " + <%=endIndexKey%> + " as key and " + <%=incomingConnName%>.<%=endColumn%> + " as value doesn't exist");
			} else {
                endNode_<%=cid%> = endIterator_<%=cid%>.next();
			}

			<%
			if (relationshipDirection.equals("OUTGOING")) {
				%>
				// @CJ - Reverse order ?
				com.tinkerpop.blueprints.Edge relationship_<%=cid%> = databaseService_<%=cid%>.addEdge(null, endNode_<%=cid%>, startNode_<%=cid%>, relationshipType_<%=cid%>.getName());
				<%
			} else {
				%>
				com.tinkerpop.blueprints.Edge relationship_<%=cid%> = databaseService_<%=cid%>.addEdge(null, startNode_<%=cid%>, endNode_<%=cid%>, relationshipType_<%=cid%>.getName());
				<%
			}
			for (Map<String, String> row : mappingTable) {
				String columnName = row.get("INPUT_COLUMN");
				String propertyName = row.get("PROPERTY_NAME");
				if (columnName != null && !columnName.isEmpty()) {
					IMetadataColumn column = metadata.getColumn(columnName);
					computeValue(column);
					%>
					if (value_<%=column%> != null) {
						<%
						if (propertyName != null && !propertyName.isEmpty()) {
							%>
							relationship_<%=cid%>.setProperty(<%=propertyName%>, value_<%=column%>); 
							<%
						} else {
							%>
							relationship_<%=cid%>.setProperty("<%=column%>", value_<%=column%>);
							<%
						}
						%>
					}
					<%
				}
			}
    	}
    
    	public void computeValue(IMetadataColumn column) {
    		if (column.getTalendType().equals("id_Date")) {
				%>
				Object value_<%=column%> = null;
				if (<%=incomingConnName%>.<%=column%> != null) {
					java.util.Date date_<%=cid%> = (java.util.Date) <%=incomingConnName%>.<%=column%>;
					value_<%=column%> = date_<%=cid%>.getTime();
				}
				<%
			} else {
				%>
				Object value_<%=column%> = <%=incomingConnName%>.<%=column%>;
				<%
			}
    	}
    

    }
    
    CJTitanRelationshipInserter relationshipInserter = new CJTitanRelationshipInserter(incomingConnName, metadata);
    
    if (startColumn != null && endColumn != null) {
    	// Create dynamique condition according to start and end columns state
    	if (startColumn.isNullable() && !endColumn.isNullable()) {
    		%>
    		if (<%=incomingConnName%>.<%=startColumn%> != null) {
    		<%
    	} else if (!startColumn.isNullable() && endColumn.isNullable()) {
    		%>
    		if (<%=incomingConnName%>.<%=endColumn%> != null) {
    		<%
    	} else if (startColumn.isNullable() && endColumn.isNullable()) {
    		%>
    		if (<%=incomingConnName%>.<%=startColumn%> != null && <%=incomingConnName%>.<%=endColumn%> != null) {
    		<%
    	} else {
    		%>
    		{
    		<%
    	}
                relationshipInserter.insert();
    			%>
	    	}
	    	<%
    }
    %>
	
	counter_<%=cid%>++;
	
	if (counter_<%=cid%> % Long.parseLong(<%=commitEvery%>) == 0) {
        // @CJTitan - Commit the action
    	databaseService_<%=cid%>.commit();
	}

	nb_line_<%=cid %>++;