<%@ jet
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List
    	java.util.Map
	"
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();

	boolean remoteServer = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REMOTE_SERVER__"));
	boolean batchMode = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__BATCH_IMPORT__"));
	String cassandraConfigDir = (String) ElementParameterParser.getValue(node, "__CASSANDRA_CONFIG_DIR__");


	if (remoteServer) { // remoteServer == existing server
		String serverUrl = ElementParameterParser.getValue(node, "__SERVER_URL__");
		%>

	// RemoteServer connection over REST
	// Via Rexster, no need to worry about the backend

		<%
	} else {
	    %>

    // Create the database and run Titan embedded
	System.out.println("Working Directory = " + System.getProperty("user.dir"));

	org.apache.commons.configuration.Configuration conf = new org.apache.commons.configuration.BaseConfiguration();
	//conf.setProperty("storage.backend", "embeddedcassandra");
	conf.setProperty("storage.backend", "cassandra");
	conf.setProperty("storage.hostname","127.0.0.1");

    //conf.setProperty("storage.cassandra-config-dir", <%=cassandraConfigDir%>);

	conf.setProperty("storage.batch-loading", <%=batchMode%>);

	com.thinkaurelius.titan.core.TitanGraph databaseService_<%=cid%> = com.thinkaurelius.titan.core.TitanFactory.open(conf);

	    <%
	}
	%>
	globalMap.put("dbService_<%=cid%>", databaseService_<%=cid%>);
