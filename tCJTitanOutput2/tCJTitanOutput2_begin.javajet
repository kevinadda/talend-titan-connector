<%@ jet
	imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.core.model.metadata.IMetadataTable
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType

		org.talend.designer.neo4j.data.Neo4jData

		java.util.List
    	java.util.Map
    	java.util.ArrayList
    	java.util.HashSet
    	java.util.Arrays
    	java.util.Set
	"
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();

    boolean useExistingConnection = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"));
    boolean batchImport = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__BATCH_IMPORT__"));
    List<Map<String, String>> values = (List<Map<String, String>>) ElementParameterParser.getObjectValue(node, "__VALUES__");

    List<String> autoIndexedColumns = new ArrayList<String>();
    Set<String> indexNames = new HashSet();
    for (Map<String, String> value : values) {
    	System.out.println("Value: " + value);
    	boolean autoIndexed = Boolean.valueOf(value.get("AUTO_INDEXED"));
   		if (autoIndexed) {
   			autoIndexedColumns.add(value.get("SCHEMA_COLUMN"));
   		}

   		String strIndexNames = value.get("INDEX_NAMES");
   		if (strIndexNames != null && !strIndexNames.isEmpty()) {
   			indexNames.addAll(Arrays.asList(strIndexNames.split(",")));
   		}
    }

    // Add update/delete index
    String action = (String) ElementParameterParser.getObjectValue(node, "__DATA_ACTION__");
    if (!action.equals("INSERT")) {
    	indexNames.add((String) ElementParameterParser.getObjectValue(node, "__INDEX_NAME__"));
    }

    if (useExistingConnection) {
    	String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
    	String dbconn = "dbService_" + connection;
    	%>
		com.thinkaurelius.titan.core.TitanGraph databaseService_<%=cid%> = (com.thinkaurelius.titan.core.TitanGraph) globalMap.get("<%=dbconn%>");
		<%
    } else {
    	boolean remoteServer = "true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__REMOTE_SERVER__"));
    	if (remoteServer) {
    		String serverUrl = ElementParameterParser.getValue(node, "__SERVER_URL__");
    		%>
    		org.apache.commons.configuration.Configuration conf = new org.apache.commons.configuration.BaseConfiguration();
        	conf.setProperty("storage.backend", "embeddedcassandra");
        	com.thinkaurelius.titan.core.TitanGraph databaseService_<%=cid%> = com.thinkaurelius.titan.core.TitanFactory.open(conf);

    		<%
    	} else {
	    	String databasePath = ElementParameterParser.getValue(node, "__DATABASE_PATH__");
			%>
			org.apache.commons.configuration.Configuration conf = new org.apache.commons.configuration.BaseConfiguration();
        	conf.setProperty("storage.backend", "embeddedcassandra");
        	com.thinkaurelius.titan.core.TitanGraph databaseService_<%=cid%> = com.thinkaurelius.titan.core.TitanFactory.open(conf);

			<%
		}
    }
    // Index configuration
    if (batchImport) {

		// Titan Specific
		String enableBatchLoading = ElementParameterParser.getValue(node, "__ENABLE_BATCH_LOADING__");
		String storageBufferSize = ElementParameterParser.getValue(node, "__STORAGE_BUFFER_SIZE__");
		String storageReadAttempts = ElementParameterParser.getValue(node, "__STORAGE_READ_ATTEMPTS__");
		String storageWriteAttempts = ElementParameterParser.getValue(node, "__STORAGE_WRITE_ATTEMPTS__");

    	%>
    	/*
    	java.util.Map<String, String> importProperties_<%=cid%> = new java.util.HashMap<String, String>();
		importProperties_<%=cid%>.put("storage.batch-loading", <%=enableBatchLoading%>);
		importProperties_<%=cid%>.put("storage.buffer-size", <%=storageBufferSize%>);
		importProperties_<%=cid%>.put("storage.read-attempts", <%=storageReadAttempts%>);
		importProperties_<%=cid%>.put("storage.write-attempts", <%=storageWriteAttempts%>);
	    */

		com.tinkerpop.blueprints.util.wrappers.batch.BatchGraph bgraph_<%=cid%> = null;
		if (databaseService_<%=cid%> instanceof com.thinkaurelius.titan.core.TitanGraph) {
			com.thinkaurelius.titan.core.TitanGraph db_<%=cid%> = (com.thinkaurelius.titan.core.TitanGraph) databaseService_<%=cid%>;
			bgraph_<%=cid%> = new com.tinkerpop.blueprints.util.wrappers.batch.BatchGraph(/* the graph */ db_<%=cid%>, /* id type */ com.tinkerpop.blueprints.util.wrappers.batch.VertexIDType.NUMBER, /* batchsize */ 1000);
		System.out.println("yeah");

		}
		// Retrieves the indexes for the Vertex element
    	java.util.Set<String> indexes = ((com.tinkerpop.blueprints.KeyIndexableGraph) databaseService_<%=cid%>).getIndexedKeys(com.tinkerpop.blueprints.Vertex.class);

		<%
	    for (String indexName : indexNames) {
	        // Removes the quotes
	        String indexNameCode = indexName.replaceAll("^\"|\"$", "");

	    	%>

	    	// Test if it exists
	    	if (!indexes.contains(<%=indexName%>)) {
	    	    // If not create it
	    	    ((com.tinkerpop.blueprints.KeyIndexableGraph) databaseService_<%=cid%>).createKeyIndex(<%=indexName%>, com.tinkerpop.blueprints.Vertex.class);
	    	}
	    	// NB: the indexes are homogene for the Base Class : Vertex or Edges
		<%
		}
	} else {
		%>

	    System.out.println("yop");

        // Retrieves the indexes for the Vertex element
    	java.util.Set<String> indexes = ((com.tinkerpop.blueprints.KeyIndexableGraph) databaseService_<%=cid%>).getIndexedKeys(com.tinkerpop.blueprints.Vertex.class);

		<%
	    for (String indexName : indexNames) {
	        // Removes the quotes
	        String indexNameCode = indexName.replaceAll("^\"|\"$", "");

	    	%>

	    	// Test if it exists
	    	if (!indexes.contains(<%=indexName%>)) {
	    	    // If not create it
	    	    ((com.tinkerpop.blueprints.KeyIndexableGraph) databaseService_<%=cid%>).createKeyIndex(<%=indexName%>, com.tinkerpop.blueprints.Vertex.class);
	    	}
	    	// NB: the indexes are homogene for the Base Class : Vertex or Edges
	    	<%
	    }
	}
%>

// Titan automatically starts transactions

int nb_line_<%=cid %> = 0;
long counter_<%=cid%> = 0;
